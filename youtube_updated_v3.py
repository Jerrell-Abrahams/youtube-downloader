# -*- coding: utf-8 -*-

import time




# Form implementation generated from reading ui file 'updated_youtube_downloader_v3.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QDialog
from PyQt5.QtCore import pyqtSignal, QThread, QObject
from Downloader import Downloader
import threading



percentage = 0


class Ui_MainWindow(object):
    # progressUpdateSignal = pyqtSignal(int)
    def __init__(self):
        self.youtube = None
        
        

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(944, 559)
        MainWindow.setStyleSheet("")
        MainWindow.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        MainWindow.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setEnabled(True)
        self.widget.setGeometry(QtCore.QRect(80, 80, 731, 361))
        self.widget.setAcceptDrops(False)
        self.widget.setAutoFillBackground(False)
        self.widget.setStyleSheet("QWidget#widget{\n"
"    background-color: black;\n"
"    border-top-left-radius: 50px;\n"
"    border-bottom-right-radius: 50px;\n"
"\n"
"}\n"
"\n"
"QPushButton#downloadButton{\n"
"    color: white;\n"
"    background-color: black;\n"
"    border: 1px solid white;\n"
"    border-radius: 5px;\n"
"}\n"
"\n"
"QPushButton#downloadButton:hover{\n"
"    background-color: white;\n"
"    color: black;\n"
"    border: 2px solid white;\n"
"}\n"
"QPushButton#downloadButton:pressed{\n"
"\n"
"    background-color:rgba(255, 5, 42);\n"
"    color: white;\n"
"}\n"
"\n"
"QLabel{\n"
"    color: white;\n"
"}\n"
"QLineEdit{\n"
"    background-color: white;\n"
"    border-radius: 20px;\n"
"    background-color: white;\n"
"}\n"
"\n"
"QRadioButton::indicator{\n"
"    background-color: white;\n"
"    border-radius: 5px;\n"
"}\n"
"\n"
"QRadioButton::indicator:checked{\n"
"    background-color: red;\n"
"    border-radius: 5px;\n"
"    border: 2px solid white;\n"
"}\n"
"\n"
"\n"
"")
        self.widget.setObjectName("widget")
        self.widget.setGraphicsEffect(QtWidgets.QGraphicsDropShadowEffect(blurRadius=40, xOffset=1, yOffset=1))
        self.downloadButton = QtWidgets.QPushButton(self.widget)
        self.downloadButton.setGeometry(QtCore.QRect(300, 240, 121, 31))
        self.downloadButton.setStyleSheet("")
        self.downloadButton.setObjectName("downloadButton")

        self.downloadButton.clicked.connect(self.download_thread)

        self.comboBox = QtWidgets.QComboBox(self.widget)
        self.comboBox.setGeometry(QtCore.QRect(450, 154, 101, 31))
        self.comboBox.setStyleSheet("border: 2px solid black;\n"
"border-radius: 3px;\n"
"border: 1px solid white;\n"
"background-color: black;\n"
"color: white;\n"
"\n"
"\n"
"\n"
"")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setGeometry(QtCore.QRect(226, 110, 71, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.widget)
        self.label_3.setGeometry(QtCore.QRect(226, 160, 71, 21))
        self.label_3.setObjectName("label_3")
        self.linkText = QtWidgets.QLineEdit(self.widget)
        self.linkText.setGeometry(QtCore.QRect(306, 101, 221, 31))
        self.linkText.setStyleSheet("color: white;\n"
"border:none;\n"
"background-color: transparent;\n"
"border-bottom:1px solid white;\n"
"\n"
"\n"
"\n"
"\n"
"")
        self.linkText.setText("")
        self.linkText.setObjectName("linkText")
        self.linkText.setFocus(True)
        self.radioButton = QtWidgets.QRadioButton(self.widget)
        self.radioButton.setGeometry(QtCore.QRect(306, 160, 131, 20))
        self.radioButton.setStyleSheet("color: white;\n"
"")
        self.radioButton.setObjectName("radioButton")
        self.toolButton = QtWidgets.QToolButton(self.widget)
        self.toolButton.setEnabled(True)
        self.toolButton.setGeometry(QtCore.QRect(676, 20, 31, 31))
        self.toolButton.setMouseTracking(False)
        self.toolButton.setAutoFillBackground(False)
        self.toolButton.setStyleSheet("border-right-color: rgb(0, 0, 0);")
        self.toolButton.setText("")

        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons8-close-window-50.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)

        self.toolButton.setIcon(icon)
        self.toolButton.setIconSize(QtCore.QSize(65, 50))
        self.toolButton.setPopupMode(QtWidgets.QToolButton.InstantPopup)
        self.toolButton.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.toolButton.setAutoRaise(False)
        self.toolButton.setArrowType(QtCore.Qt.NoArrow)
        self.toolButton.setObjectName("toolButton")
        self.toolButton.clicked.connect(self.close_program)

        self.label_4 = QtWidgets.QLabel(self.widget)
        self.label_4.setGeometry(QtCore.QRect(250, 0, 251, 111))
        self.label_4.setText("")
        self.label_4.setPixmap(QtGui.QPixmap("../../../../Downloads/youtube_logo_dark-920x460.webp"))
        self.label_4.setScaledContents(True)
        self.label_4.setObjectName("label_4")

        self.label_Percentage = QtWidgets.QLabel(self.widget)
        self.label_Percentage.setGeometry(QtCore.QRect(80, 310, 600, 23))
        self.label_Percentage.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Percentage.setText("")
        self.label_Percentage.setScaledContents(True)
        self.label_Percentage.setObjectName("label_Percentage")
        self.label_Percentage.setStyleSheet(
            "font-size: 12px;"
            "font-family: Open Sans;"
            "font-weight: bold;"
        )
        


        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 944, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        

        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.downloadButton.setText(_translate("MainWindow", "Download"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Mp3 File"))
        self.comboBox.setItemText(1, _translate("MainWindow", "360p"))
        self.comboBox.setItemText(2, _translate("MainWindow", "720p"))
        self.label_2.setText(_translate("MainWindow", "Video URL:"))
        self.label_3.setText(_translate("MainWindow", "Resolution:"))
        self.linkText.setPlaceholderText(_translate("MainWindow", "Video link"))
        self.radioButton.setText(_translate("MainWindow", "Highest resolution"))
        
        
        

    def download_thread(self):
        self.downloadButton.setEnabled(False)
        thread = threading.Thread(target=self.downloadButtonPressed)
        thread.start()
        return

        


    def progressRetriever(self):
        videoName = self.youtube.get_title()
    
        while self.youtube.percentage <= 100:
            time.sleep(1.5)
            self.label_Percentage.setText(videoName + "... " + str(self.youtube.percentage) + "%")
            self.label_Percentage.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Percentage.setText(" ")
        return
 
            

    def downloadButtonPressed(self):
        self.youtube = Downloader( self.linkText.text())
        thread2 = threading.Thread(target=self.progressRetriever)
        
        try:
            path = QtWidgets.QFileDialog.getExistingDirectory()
            thread2.start()
            


            if path == "":
                return

        except:
            return

        radioButton = self.radioButton
        comboBox = self.comboBox.currentText()
        

        if radioButton.isChecked():
            print("Inside download function")
            res = self.youtube.get_highest_resolution()
            self.youtube.download_video(location=str(path), resolution=str(res))
            self.linkText.setText("")
            self.downloadButton.setEnabled(True)

            
            
        elif comboBox == "Mp3 File":
            self.youtube.download_audio_only(location=str(path))

            self.linkText.setText("")
            self.downloadButton.setEnabled(True)
            
   


        elif comboBox == "720p":
            thread2.start()
            self.youtube.download_video(location=str(path), resolution="720p")

            self.linkText.setText("")
            self.downloadButton.setEnabled(True)
            
            

        elif comboBox == "360p":
            thread2.start()
            self.youtube.download_video(location=str(path), resolution="360p")
            self.linkText.setText("")
            self.downloadButton.setEnabled(True)



        return

    def close_program(self):
        app.quit()

                    
            
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())